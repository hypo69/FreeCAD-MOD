## \file AIEngineer/dialogs/chat_dialog.py
# -*- coding: utf-8 -*-
"""
–î–∏–∞–ª–æ–≥ —á–∞—Ç–∞ —Å Google Gemini AI.
=================================

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –º–æ–¥–µ–ª—å—é Gemini
—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.

.. module:: AIEngineer.dialogs.chat_dialog
"""

import asyncio
from pathlib import Path
from typing import Optional, List, Dict
from PySide import QtGui, QtCore
import FreeCAD

from ..gemini import GoogleGenerativeAi
from ..utils import get_api_key, AI_DATA_DIR, get_image_files


class ChatMessage(QtGui.QWidget):
    """–í–∏–¥–∂–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ."""

    def __init__(self, text: str, is_user: bool = True, parent=None):
        """
        –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∏–¥–∂–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.

        Args:
            text (str): –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
            is_user (bool): True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, False –µ—Å–ª–∏ –æ—Ç AI.
            parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç.
        """
        super().__init__(parent)
        
        layout = QtGui.QHBoxLayout()
        layout.setContentsMargins(10, 5, 10, 5)
        
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        text_edit = QtGui.QTextEdit()
        text_edit.setPlainText(text)
        text_edit.setReadOnly(True)
        text_edit.setMaximumHeight(150)
        
        # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        if is_user:
            text_edit.setStyleSheet(
                'QTextEdit { '
                'background-color: #E3F2FD; '
                'border: 1px solid #90CAF9; '
                'border-radius: 8px; '
                'padding: 8px; '
                '}'
            )
            layout.addStretch()
            layout.addWidget(text_edit, 7)
        else:
            text_edit.setStyleSheet(
                'QTextEdit { '
                'background-color: #F5F5F5; '
                'border: 1px solid #E0E0E0; '
                'border-radius: 8px; '
                'padding: 8px; '
                '}'
            )
            layout.addWidget(text_edit, 7)
            layout.addStretch()
        
        self.setLayout(layout)


class ChatDialog(QtGui.QDialog):
    """–î–∏–∞–ª–æ–≥ —á–∞—Ç–∞ —Å Google Gemini AI."""

    def __init__(self, parent=None):
        """
        –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∏–∞–ª–æ–≥ —á–∞—Ç–∞.

        Args:
            parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç.
        """
        super().__init__(parent)
        self.setWindowTitle('AI Engineer ‚Äî Chat with Gemini')
        self.resize(800, 600)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        self.llm: Optional[GoogleGenerativeAi] = None
        self.current_image: Optional[Path] = None
        self.current_model: str = ''
        self.chat_session_name: str = 'freecad_chat'
        
        # –°–æ–∑–¥–∞–Ω–∏–µ UI
        self._create_ui()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI –∫–ª–∏–µ–Ω—Ç–∞
        self._initialize_ai()
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
        self._load_chat_history()

    def _create_ui(self) -> None:
        """–§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å."""
        main_layout = QtGui.QVBoxLayout()
        
        # === –ó–ê–ì–û–õ–û–í–û–ö ===
        header_layout = QtGui.QHBoxLayout()
        
        title_label = QtGui.QLabel('<h2>üí¨ Chat with Gemini AI</h2>')
        header_layout.addWidget(title_label)
        
        header_layout.addStretch()
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏
        self.model_label = QtGui.QLabel('Model: Loading...')
        self.model_label.setStyleSheet(
            'QLabel { '
            'color: #1976D2; '
            'font-weight: bold; '
            'padding: 5px; '
            'background-color: #E3F2FD; '
            'border-radius: 4px; '
            '}'
        )
        header_layout.addWidget(self.model_label)
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings_btn = QtGui.QPushButton('‚öôÔ∏è Settings')
        settings_btn.clicked.connect(self._open_settings)
        settings_btn.setMaximumWidth(100)
        settings_btn.setToolTip('Open AI Settings to change model')
        header_layout.addWidget(settings_btn)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
        clear_btn = QtGui.QPushButton('üóëÔ∏è Clear')
        clear_btn.clicked.connect(self._clear_chat)
        clear_btn.setMaximumWidth(80)
        header_layout.addWidget(clear_btn)
        
        main_layout.addLayout(header_layout)
        
        # === –û–ë–õ–ê–°–¢–¨ –°–û–û–ë–©–ï–ù–ò–ô ===
        self.messages_scroll = QtGui.QScrollArea()
        self.messages_scroll.setWidgetResizable(True)
        self.messages_scroll.setStyleSheet(
            'QScrollArea { '
            'background-color: white; '
            'border: 1px solid #E0E0E0; '
            'border-radius: 4px; '
            '}'
        )
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
        self.messages_container = QtGui.QWidget()
        self.messages_layout = QtGui.QVBoxLayout()
        self.messages_layout.addStretch()
        self.messages_container.setLayout(self.messages_layout)
        self.messages_scroll.setWidget(self.messages_container)
        
        main_layout.addWidget(self.messages_scroll)
        
        # === –ü–ê–ù–ï–õ–¨ –ö–û–ù–¢–ï–ö–°–¢–ê ===
        context_layout = QtGui.QHBoxLayout()
        
        # –í—ã–±–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.image_combo = QtGui.QComboBox()
        self.image_combo.addItem('No image')
        self._refresh_image_list()
        context_layout.addWidget(QtGui.QLabel('Attach image:'))
        context_layout.addWidget(self.image_combo, 3)
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        refresh_btn = QtGui.QPushButton('üîÑ')
        refresh_btn.setMaximumWidth(40)
        refresh_btn.clicked.connect(self._refresh_image_list)
        refresh_btn.setToolTip('Refresh image list')
        context_layout.addWidget(refresh_btn)
        
        context_layout.addStretch()
        
        main_layout.addLayout(context_layout)
        
        # === –ü–ê–ù–ï–õ–¨ –í–í–û–î–ê ===
        input_layout = QtGui.QVBoxLayout()
        
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.input_text = QtGui.QTextEdit()
        self.input_text.setMaximumHeight(100)
        self.input_text.setPlaceholderText('Type your message here...')
        self.input_text.setStyleSheet(
            'QTextEdit { '
            'border: 2px solid #90CAF9; '
            'border-radius: 4px; '
            'padding: 8px; '
            'font-size: 11pt; '
            '}'
        )
        input_layout.addWidget(self.input_text)
        
        # –ö–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
        buttons_layout = QtGui.QHBoxLayout()
        
        self.send_btn = QtGui.QPushButton('üì§ Send (Ctrl+Enter)')
        self.send_btn.clicked.connect(self._send_message)
        self.send_btn.setStyleSheet(
            'QPushButton { '
            'background-color: #2196F3; '
            'color: white; '
            'border: none; '
            'border-radius: 4px; '
            'padding: 10px 20px; '
            'font-size: 11pt; '
            'font-weight: bold; '
            '} '
            'QPushButton:hover { '
            'background-color: #1976D2; '
            '} '
            'QPushButton:disabled { '
            'background-color: #BDBDBD; '
            '}'
        )
        buttons_layout.addWidget(self.send_btn)
        
        close_btn = QtGui.QPushButton('Close')
        close_btn.clicked.connect(self._on_close)
        close_btn.setMaximumWidth(100)
        buttons_layout.addWidget(close_btn)
        
        input_layout.addLayout(buttons_layout)
        main_layout.addLayout(input_layout)
        
        # === –ò–ù–î–ò–ö–ê–¢–û–† –ó–ê–ì–†–£–ó–ö–ò ===
        self.loading_label = QtGui.QLabel('‚è≥ Processing...')
        self.loading_label.setStyleSheet(
            'QLabel { '
            'color: #1976D2; '
            'font-weight: bold; '
            'padding: 5px; '
            '}'
        )
        self.loading_label.hide()
        main_layout.addWidget(self.loading_label)
        
        self.setLayout(main_layout)
        
        # –ì–æ—Ä—è—á–∞—è –∫–ª–∞–≤–∏—à–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        send_shortcut = QtGui.QShortcut(QtGui.QKeySequence('Ctrl+Return'), self)
        send_shortcut.activated.connect(self._send_message)

    def _initialize_ai(self) -> None:
        """–§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç AI –∫–ª–∏–µ–Ω—Ç —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ QSettings."""
        api_key: str = get_api_key()
        
        if not api_key:
            QtGui.QMessageBox.critical(
                self,
                'Error',
                'Gemini API key not configured.\n\n'
                'Please configure it in AI Settings.'
            )
            self.send_btn.setEnabled(False)
            self.model_label.setText('Model: Not configured')
            return
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ QSettings
        settings = QtCore.QSettings('FreeCAD', 'AIEngineer')
        model_name: str = settings.value('model_name', 'gemini-2.5-flash')
        
        try:
            self.current_model = model_name
            self.llm = GoogleGenerativeAi(
                api_key=api_key,
                model_name=model_name,
                system_instruction=(
                    '–í—ã - —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤, —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö —Å FreeCAD. '
                    '–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π—Ç–µ —Ç–æ—á–Ω—ã–µ, –∫—Ä–∞—Ç–∫–∏–µ –∏ –ø–æ–ª–µ–∑–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã. '
                    '–ü—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ–ø–∏—Å—ã–≤–∞–π—Ç–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏.'
                )
            )
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–º–µ–Ω–∏ —Å–µ—Å—Å–∏–∏ —á–∞—Ç–∞
            self.llm.chat_session_name = self.chat_session_name
            self.model_label.setText(f'Model: {model_name}')
            FreeCAD.Console.PrintMessage(f'[AIEngineer] Chat initialized with {model_name}\n')
            
        except Exception as ex:
            FreeCAD.Console.PrintError(f'[AIEngineer] Failed to initialize AI: {ex}\n')
            QtGui.QMessageBox.critical(
                self,
                'Initialization Error',
                f'Failed to initialize Gemini:\n{str(ex)}'
            )
            self.send_btn.setEnabled(False)
            self.model_label.setText('Model: Error')

    def _load_chat_history(self) -> None:
        """–§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –¥–∏–∞–ª–æ–≥–∞."""
        if not self.llm:
            return
        
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏–∑ —Ñ–∞–π–ª–∞
            import asyncio
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            loop.run_until_complete(self.llm._load_chat_history())
            loop.close()
            
            # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ UI
            if self.llm.chat_history:
                for msg in self.llm.chat_history:
                    role = msg.get('role', '')
                    parts = msg.get('parts', [])
                    
                    if role == 'user':
                        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —á–∞—Å—Ç–µ–π
                        text_parts = [p for p in parts if isinstance(p, str)]
                        if text_parts:
                            text = '\n'.join(text_parts)
                            self._add_message_to_ui(text, is_user=True)
                    elif role == 'model':
                        text_parts = [p for p in parts if isinstance(p, str)]
                        if text_parts:
                            text = '\n'.join(text_parts)
                            self._add_message_to_ui(text, is_user=False)
                
                FreeCAD.Console.PrintMessage(
                    f'[AIEngineer] Loaded {len(self.llm.chat_history)} messages from history\n'
                )
        except Exception as ex:
            FreeCAD.Console.PrintError(f'[AIEngineer] Failed to load chat history: {ex}\n')

    def _open_settings(self) -> None:
        """–§—É–Ω–∫—Ü–∏—è –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–∏."""
        try:
            from ..settings_dialog import SettingsDialog
            dialog = SettingsDialog()
            result = dialog.exec_()
            
            if result == QtGui.QDialog.Accepted:
                # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ AI –∫–ª–∏–µ–Ω—Ç–∞ —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
                settings = QtCore.QSettings('FreeCAD', 'AIEngineer')
                new_model: str = settings.value('model_name', 'gemini-2.5-flash')
                
                if new_model != self.current_model:
                    response = QtGui.QMessageBox.question(
                        self,
                        'Model Changed',
                        f'Model changed to {new_model}.\n\n'
                        'Start a new chat session with this model?',
                        QtGui.QMessageBox.Yes | QtGui.QMessageBox.No
                    )
                    
                    if response == QtGui.QMessageBox.Yes:
                        self._initialize_ai()
                        self._clear_chat()
                        
        except Exception as ex:
            FreeCAD.Console.PrintError(f'[AIEngineer] Failed to open settings: {ex}\n')
            QtGui.QMessageBox.critical(
                self,
                'Settings Error',
                f'Failed to open settings:\n{str(ex)}'
            )

    def _refresh_image_list(self) -> None:
        """–§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."""
        current_text: str = self.image_combo.currentText()
        self.image_combo.clear()
        self.image_combo.addItem('No image')
        
        images: List[str] = get_image_files()
        self.image_combo.addItems(images)
        
        # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if current_text != 'No image':
            index: int = self.image_combo.findText(current_text)
            if index >= 0:
                self.image_combo.setCurrentIndex(index)

    def _clear_chat(self) -> None:
        """–§—É–Ω–∫—Ü–∏—è –æ—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞."""
        if not self.llm or not self.llm.chat_history:
            return
        
        response = QtGui.QMessageBox.question(
            self,
            'Clear Chat',
            'Clear all messages?',
            QtGui.QMessageBox.Yes | QtGui.QMessageBox.No
        )
        
        if response == QtGui.QMessageBox.Yes:
            # –û—á–∏—Å—Ç–∫–∞ UI
            while self.messages_layout.count() > 1:
                item = self.messages_layout.takeAt(0)
                if item.widget():
                    item.widget().deleteLater()
            
            # –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –≤ –º–æ–¥–µ–ª–∏
            if self.llm:
                self.llm.clear_history()
            
            FreeCAD.Console.PrintMessage('[AIEngineer] Chat history cleared\n')

    def _add_message_to_ui(self, text: str, is_user: bool = True) -> None:
        """
        –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ UI.

        Args:
            text (str): –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
            is_user (bool): True –µ—Å–ª–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, False –µ—Å–ª–∏ –æ—Ç AI.
        """
        message_widget = ChatMessage(text, is_user)
        self.messages_layout.insertWidget(self.messages_layout.count() - 1, message_widget)
        
        # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑
        QtCore.QTimer.singleShot(100, lambda: self.messages_scroll.verticalScrollBar().setValue(
            self.messages_scroll.verticalScrollBar().maximum()
        ))

    def _send_message(self) -> None:
        """–§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ AI."""
        if not self.llm:
            QtGui.QMessageBox.warning(
                self,
                'Not Initialized',
                'AI is not initialized. Please check your settings.'
            )
            return
        
        message: str = self.input_text.toPlainText().strip()
        
        if not message:
            QtGui.QMessageBox.warning(self, 'Warning', 'Please enter a message.')
            return
        
        # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ UI –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self.send_btn.setEnabled(False)
        self.input_text.setEnabled(False)
        self.loading_label.show()
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ UI
        self._add_message_to_ui(message, is_user=True)
        self.input_text.clear()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        selected_image: str = self.image_combo.currentText()
        image_path: Optional[Path] = None
        
        if selected_image and selected_image != 'No image':
            image_path = AI_DATA_DIR / selected_image
            FreeCAD.Console.PrintMessage(f'[AIEngineer] Attaching image: {selected_image}\n')
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
        QtCore.QTimer.singleShot(10, lambda: self._process_message(message, image_path))

    def _process_message(self, message: str, image_path: Optional[Path] = None) -> None:
        """
        –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–µ—Ç–æ–¥ chat –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏.

        Args:
            message (str): –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
            image_path (Optional[Path]): –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é.
        """
        try:
            response: Optional[str] = None
            
            # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞ chat –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
            if image_path and image_path.exists():
                # –î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º describe_image, –Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –≤—Ä—É—á–Ω—É—é
                mime_type: str = 'image/jpeg' if image_path.suffix.lower() in ['.jpg', '.jpeg'] else 'image/png'
                response = self.llm.describe_image(
                    image=image_path,
                    mime_type=mime_type,
                    prompt=message
                )
                
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –≤—Ä—É—á–Ω—É—é, —Ç–∞–∫ –∫–∞–∫ describe_image –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç chat
                if response:
                    self.llm.chat_history.append({'role': 'user', 'parts': [message, str(image_path)]})
                    self.llm.chat_history.append({'role': 'model', 'parts': [response]})
                    
                    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
                    import asyncio
                    loop = asyncio.new_event_loop()
                    asyncio.set_event_loop(loop)
                    loop.run_until_complete(self.llm._save_chat_history())
                    loop.close()
            else:
                # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞ chat, –∫–æ—Ç–æ—Ä—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é
                import asyncio
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                response = loop.run_until_complete(
                    self.llm.chat(message, chat_session_name=self.chat_session_name)
                )
                loop.close()
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
            if response:
                self._add_message_to_ui(response, is_user=False)
                FreeCAD.Console.PrintMessage('[AIEngineer] Response received and saved to history\n')
            else:
                QtGui.QMessageBox.warning(
                    self,
                    'No Response',
                    'AI did not return a response. Please try again.'
                )
            
        except Exception as ex:
            FreeCAD.Console.PrintError(f'[AIEngineer] Chat error: {ex}\n')
            QtGui.QMessageBox.critical(
                self,
                'Error',
                f'An error occurred:\n{str(ex)}'
            )
        
        finally:
            # –í–∫–ª—é—á–µ–Ω–∏–µ UI
            self.send_btn.setEnabled(True)
            self.input_text.setEnabled(True)
            self.loading_label.hide()
            self.input_text.setFocus()

    def _on_close(self) -> None:
        """–§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –¥–∏–∞–ª–æ–≥–∞."""
        if self.llm and self.llm.chat_history:
            try:
                import asyncio
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                loop.run_until_complete(self.llm._save_chat_history())
                loop.close()
                FreeCAD.Console.PrintMessage('[AIEngineer] Chat history saved on close\n')
            except Exception as ex:
                FreeCAD.Console.PrintError(f'[AIEngineer] Failed to save history on close: {ex}\n')
        
        self.accept()