# -*- coding: utf-8 -*-
"""
–î–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API-–∫–ª—é—á–∞ Google Gemini.
"""

from PySide import QtGui, QtCore
from .utils import get_api_key, save_to_env


class SettingsDialog(QtGui.QDialog):
    """–û–∫–Ω–æ –¥–ª—è –≤–≤–æ–¥–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è API-–∫–ª—é—á–∞ Google Generative AI."""

    def __init__(self):
        super().__init__()
        self.setWindowTitle('AI Settings ‚Äî Google Gemini')
        self.resize(500, 250)

        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –∫–ª—é—á–∞ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: .env > QSettings)
        self.settings = QtCore.QSettings('FreeCAD', 'AIEngineer')
        current_key: str = get_api_key()

        layout = QtGui.QVBoxLayout()

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        info_label = QtGui.QLabel(
            'Enter your Google Gemini API key:\n'
            'Get it at https://aistudio.google.com/app/apikey\n\n'
            'The key will be saved in .env file for security.'
        )
        layout.addWidget(info_label)

        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –∫–ª—é—á–∞
        self.key_input = QtGui.QLineEdit()
        self.key_input.setText(current_key)
        self.key_input.setEchoMode(QtGui.QLineEdit.Password)
        layout.addWidget(self.key_input)

        # –ö–Ω–æ–ø–∫–∞ –ø–æ–∫–∞–∑–∞/—Å–∫—Ä—ã—Ç–∏—è –∫–ª—é—á–∞
        self.toggle_visibility = QtGui.QPushButton('üëÅÔ∏è Show Key')
        self.toggle_visibility.setCheckable(True)
        self.toggle_visibility.clicked.connect(self.toggle_key_visibility)
        layout.addWidget(self.toggle_visibility)

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∫–ª—é—á–∞
        from .utils import load_env
        env_vars: dict = load_env()
        source_text: str = ''
        if env_vars.get('GEMINI_API_KEY'):
            source_text = '‚úì Key loaded from .env file'
        elif current_key:
            source_text = '‚ö† Key loaded from QSettings (will be migrated to .env)'
        else:
            source_text = '‚úó No API key found'
        
        self.source_label = QtGui.QLabel(source_text)
        self.source_label.setStyleSheet('color: gray; font-size: 10pt;')
        layout.addWidget(self.source_label)

        # –ö–Ω–æ–ø–∫–∏ OK / Cancel
        btn_layout = QtGui.QHBoxLayout()
        ok_btn = QtGui.QPushButton('OK')
        cancel_btn = QtGui.QPushButton('Cancel')
        ok_btn.clicked.connect(self.accept)
        cancel_btn.clicked.connect(self.reject)
        btn_layout.addStretch()
        btn_layout.addWidget(ok_btn)
        btn_layout.addWidget(cancel_btn)
        layout.addLayout(btn_layout)

        self.setLayout(layout)

    def toggle_key_visibility(self) -> None:
        """–§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –≤–∏–¥–∏–º–æ—Å—Ç—å API-–∫–ª—é—á–∞ –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞."""
        if self.toggle_visibility.isChecked():
            self.key_input.setEchoMode(QtGui.QLineEdit.Normal)
            self.toggle_visibility.setText('üëÅÔ∏è Hide Key')
        else:
            self.key_input.setEchoMode(QtGui.QLineEdit.Password)
            self.toggle_visibility.setText('üëÅÔ∏è Show Key')

    def accept(self) -> None:
        """–§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç API-–∫–ª—é—á –≤ .env –∏ QSettings –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏."""
        api_key: str = self.key_input.text().strip()
        
        if not api_key:
            self.settings.remove('api_key')
            super().accept()
            return
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ .env (–æ—Å–Ω–æ–≤–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ)
        save_success: bool = save_to_env('GEMINI_API_KEY', api_key)
        
        # –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ QSettings –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        self.settings.setValue('api_key', api_key)
        
        if save_success:
            QtGui.QMessageBox.information(
                self,
                'Success',
                'API key saved successfully to .env file!'
            )
        else:
            QtGui.QMessageBox.warning(
                self,
                'Warning',
                'API key saved to QSettings, but failed to save to .env file.\n'
                'Check console for details.'
            )
        
        super().accept()